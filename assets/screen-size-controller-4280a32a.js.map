{"version":3,"file":"screen-size-controller-4280a32a.js","sources":["../../node_modules/@lit/reactive-element/decorators/custom-element.js","../../node_modules/@lit/reactive-element/decorators/base.js","../../node_modules/@lit/reactive-element/decorators/query-assigned-elements.js","../../packages/outline-core/src/outline-element/outline-element.ts","../../packages/outline-core/src/controllers/container-size-controller.ts","../../packages/outline-core/src/controllers/screen-size-controller.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst e=e=>n=>\"function\"==typeof n?((e,n)=>(customElements.define(e,n),n))(e,n):((e,n)=>{const{kind:t,elements:s}=n;return{kind:t,elements:s,finisher(n){customElements.define(e,n)}}})(e,n);export{e as customElement};\n//# sourceMappingURL=custom-element.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst e=(e,t,o)=>{Object.defineProperty(t,o,e)},t=(e,t)=>({kind:\"method\",placement:\"prototype\",key:t.key,descriptor:e}),o=({finisher:e,descriptor:t})=>(o,n)=>{var r;if(void 0===n){const n=null!==(r=o.originalKey)&&void 0!==r?r:o.key,i=null!=t?{kind:\"method\",placement:\"prototype\",key:n,descriptor:t(o.key)}:{...o,key:n};return null!=e&&(i.finisher=function(t){e(t,n)}),i}{const r=o.constructor;void 0!==t&&Object.defineProperty(o,n,t(n)),null==e||e(r,n)}};export{o as decorateProperty,e as legacyPrototypeMethod,t as standardPrototypeMethod};\n//# sourceMappingURL=base.js.map\n","import{decorateProperty as o}from\"./base.js\";\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */var n;const e=null!=(null===(n=window.HTMLSlotElement)||void 0===n?void 0:n.prototype.assignedElements)?(o,n)=>o.assignedElements(n):(o,n)=>o.assignedNodes(n).filter((o=>o.nodeType===Node.ELEMENT_NODE));function l(n){const{slot:l,selector:t}=null!=n?n:{};return o({descriptor:o=>({get(){var o;const r=\"slot\"+(l?`[name=${l}]`:\":not([name])\"),i=null===(o=this.renderRoot)||void 0===o?void 0:o.querySelector(r),s=null!=i?e(i,n):[];return t?s.filter((o=>o.matches(t))):s},enumerable:!0,configurable:!0})})}export{l as queryAssignedElements};\n//# sourceMappingURL=query-assigned-elements.js.map\n","import { LitElement } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n/* @TODO: Remove Outline Element because it doesn't seem to add value? */\n@customElement('outline-element')\nexport class OutlineElement extends LitElement {}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'outline-element': OutlineElement;\n  }\n}\n","import { ReactiveControllerHost, ReactiveController } from 'lit';\n// @todo: Figure out why outline-config isn't working.\n// import { defaultScreenSizes } from '@phase2/outline-config';\nconst defaultScreenSizes = {\n  xs: '480px',\n  sm: '640px',\n  md: '768px',\n  lg: '1024px',\n  xl: '1280px',\n  xxl: '1440px',\n  xxxl: '2160px',\n};\n\n/**\n * Container size lookup, ordered small to large.\n *\n * We are using screen sizes to avoid making additional size groups.\n */\nexport const containerSizeMap = new Map(\n  (\n    Object.entries(defaultScreenSizes).map(([container, sizeString]) => {\n      return [container, parseInt(sizeString.slice(0, -2))];\n    }) as [string, number][]\n  ).sort(([, sizeA], [, sizeB]) => {\n    return sizeA - sizeB;\n  })\n);\n\n/**\n * Can be used to get the container size of the element. Useful if we want to display components differently based on container size rather than the screen size, such as with different sized columns.\n *\n * This attempts to fit the mobile first pattern.\n *\n * Will set a `container-size-??` attributes on the component that indicate if the container is at least that size.\n *\n * Example: `@screen md` translates to `container-size-xs container-size-sm container-size-md`.\n */\nexport class ContainerSizeController implements ReactiveController {\n  containerSizes: string[] = [];\n\n  host: ReactiveControllerHost;\n\n  resizeObserver: ResizeObserver;\n\n  constructor(host: ReactiveControllerHost) {\n    this.host = host;\n    this.host.addController(this);\n\n    this.handleResize();\n  }\n\n  hostConnected() {\n    this.resizeObserver = new ResizeObserver(this.handleResize);\n\n    this.resizeObserver.observe(document.querySelector('body') as HTMLElement);\n  }\n\n  hostDisconnected() {\n    this.resizeObserver.disconnect();\n  }\n\n  handleResize = () => {\n    const containerSizesPreUpdate = this.containerSizes;\n\n    const containerWidth =\n      (this.host as unknown as HTMLElement).parentElement?.clientWidth ?? 0;\n\n    this.containerSizes = Array.from(containerSizeMap)\n      .filter(([, size]) => containerWidth >= size)\n      .map(([container]) => container);\n\n    // Since this is mobile first and we just add more sizes as we get larger, the length will tell us if we have the same size.\n    if (this.containerSizes.length !== containerSizesPreUpdate.length) {\n      Array.from(containerSizeMap).forEach(([containerSize]) => {\n        if (this.containerSizes.includes(containerSize)) {\n          (this.host as unknown as HTMLElement).setAttribute(\n            `container-size-${containerSize}`,\n            'true'\n          );\n        }\n\n        if (this.containerSizes.includes(containerSize) === false) {\n          (this.host as unknown as HTMLElement).removeAttribute(\n            `container-size-${containerSize}`\n          );\n        }\n      });\n\n      this.host.requestUpdate();\n    }\n  };\n}\n","import { ReactiveControllerHost, ReactiveController } from 'lit';\n// @todo: Figure out why outline-config isn't working.\n// import { defaultScreenSizes } from '@phase2/outline-config';\nconst defaultScreenSizes = {\n  xs: '480px',\n  sm: '640px',\n  md: '768px',\n  lg: '1024px',\n  xl: '1280px',\n  xxl: '1440px',\n  xxxl: '2160px',\n};\n\n/**\n * Screen size lookup, ordered small to large.\n *\n * Notice: If you get a linting issue, `Parsing error: Cannot read properties of undefined (reading 'map')`, you need to update your packages.\n * At least:\n * \"@typescript-eslint/eslint-plugin\": \"^5.0.0\",\n * \"@typescript-eslint/parser\": \"^5.0.0\",\n */\nexport const screenSizeMap = new Map(\n  (\n    Object.entries(defaultScreenSizes).map(([screen, sizeString]) => {\n      return [screen, parseInt(sizeString.slice(0, -2))];\n    }) as [string, number][]\n  ).sort(([, sizeA], [, sizeB]) => {\n    return sizeA - sizeB;\n  })\n);\n\n/**\n * Usage:\n *\n * Import `screenSizeMap` and `ScreenSizeController`:\n * import {\n *  screenSizeMap,\n *  ScreenSizeController,\n * } from '../../controllers/screen-size-controller';\n *\n * Add the property to your class:\n *\n * // eslint-disable-next-line\n * // @ts-ignore\n * // We are using the controller to watch for screen size changes, but don't need to use it otherwise.\n * private _screenSizeController = new ScreenSizeController(this);\n *\n * Set a variable as needed:\n * const isMobile = window.innerWidth < (screenSizeMap.get('lg') as number);\n */\nexport class ScreenSizeController implements ReactiveController {\n  isMobile = false;\n\n  screenSize = 'xxs';\n\n  host: ReactiveControllerHost;\n\n  resizeObserver: ResizeObserver;\n\n  constructor(host: ReactiveControllerHost) {\n    (this.host = host).addController(this);\n    this.handleResize();\n  }\n\n  hostConnected() {\n    this.resizeObserver = new ResizeObserver(this.handleResize);\n\n    this.resizeObserver.observe(document.querySelector('body') as HTMLElement);\n  }\n\n  hostDisconnected() {\n    this.resizeObserver.disconnect();\n  }\n\n  handleResize = () => {\n    const propertyValuesPreUpdate = [\n      ['isMobile', this.isMobile],\n      ['screenSize', this.screenSize],\n    ] as [keyof ScreenSizeController, boolean | string][];\n\n    this.isMobile = window.innerWidth <= (screenSizeMap.get('sm') as number);\n\n    this.screenSize = Array.from(screenSizeMap).reduce(\n      (previousValue, [screen, size]) => {\n        return window.innerWidth >= size ? screen : previousValue;\n      },\n      'xxs'\n    );\n\n    if (\n      propertyValuesPreUpdate\n        .map(([propertyName, preUpdateValue]) => {\n          return this[propertyName] !== preUpdateValue;\n        })\n        .reduce((previous, current) => previous || current)\n    ) {\n      this.host.requestUpdate();\n    }\n  };\n}\n"],"names":["e","n","t","s","o","i","r","l","OutlineElement","LitElement","__decorateClass","customElement","defaultScreenSizes","container","sizeString","sizeA","sizeB","screen"],"mappings":"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","x_google_ignoreList":[0,1,2]}