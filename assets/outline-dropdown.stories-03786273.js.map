{"version":3,"file":"outline-dropdown.stories-03786273.js","sources":["../../packages/components/@deprecated/outline-dropdown/src/outline-dropdown.css.lit.ts","../../packages/components/@deprecated/outline-dropdown/src/outline-dropdown.ts"],"sourcesContent":["\nimport { css } from 'lit';\nexport default css`\n/* Apply component specific CSS */\n:host{\n  box-sizing:border-box;\n  display:inline-flex;\n}\n:host *,\n:host *::before,\n:host *::after{\n  box-sizing:inherit;\n}\n:host([aria-hidden='true']),\n[aria-hidden='true'],\n.visually-hidden{\n  position:absolute !important;\n  overflow:hidden;\n  clip:rect(1px, 1px, 1px, 1px);\n  width:1px;\n  height:1px;\n  word-wrap:normal;\n}\n.sr-only{\n  position:absolute !important;\n  overflow:hidden;\n  clip:rect(1px, 1px, 1px, 1px);\n  width:1px;\n  height:1px;\n  word-wrap:normal;\n}\n.dropdown{\n  display:flex;\n  position:relative;\n}\n.dropdown--open .btn.primary{\n    background-color:var(--outline-button--primary-bg-color-hover--computed);\n    color:var(--outline-button--primary-text-color-hover--computed);\n    font-weight:var(--outline-button--primary-weight-hover--computed);\n    box-shadow:var(--outline-button--primary-ring-hover--computed);\n  }\n.dropdown--open .dropdown__panel{\n  margin:0;\n  position:absolute;\n  z-index:50;\n  min-width:350px;\n  border-width:2px;\n  border-style:solid;\n  border-color:var(--outline-gray-400);\n  background-color:var(--outline-gray-200);\n  color:var(--outline-black);\n  padding:1rem;\n  pointer-events:all;\n}\noutline-split-button{\n}\noutline-button .btn{\n    padding:var(--outline-button--padding--computed);\n  }\noutline-button .btn.primary{\n    padding:var(--outline-button--primary-padding--computed);\n  }\noutline-button .btn.secondary{\n    padding:var(--outline-button--secondary-padding--computed);\n  }\noutline-button .btn.tertiary{\n    padding:var(--outline-button--tertiary-padding--computed);\n  }\noutline-button .btn.link{\n    padding:var(--outline-button--link-padding--computed);\n  }\noutline-button .btn.primary:hover{\n  }\noutline-button .icon__trigger{\n    display:flex;\n    margin-left:1rem;\n  }\n`;","import { html, CSSResultGroup, TemplateResult } from 'lit';\nimport { customElement, property, query, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\nimport {\n  OutlineElement,\n  SlotsController,\n  MobileController,\n  emit,\n  waitForEvent,\n  watch,\n} from '@phase2/outline-core';\nimport { LinkTargetType } from '@phase2/outline-link';\nimport { ButtonVariant } from '@phase2/outline-button';\nimport '@phase2/outline-button';\nimport '@phase2/outline-icon';\n\nimport componentStyles from './outline-dropdown.css.lit';\n\n/**\n * @element outline-dropdown\n * @since 1.0.0\n * @status experimental\n *\n * @slot header - Content to be rendered in the header of the dropdown.\n * @slot dropdown - Content to be rendered in the dropdown.\n * @slot footer - Content to be rendered in the footer of the dropdown.\n *\n * @event outline-show - Emitted when the dropdown opens.\n * @event outline-after-show - Emitted after the dropdown opens and all animations are complete.\n * @event outline-hide - Emitted when the dropdown closes.\n * @event outline-after-hide - Emitted after the dropdown closes and all animations are complete.\n *\n * @csspart base - The component's base wrapper.\n * @csspart trigger - The container that wraps the trigger.\n * @csspart panel - The panel that gets shown when the dropdown is open.\n */\n@customElement('outline-dropdown')\nexport class OutlineDropdown extends OutlineElement {\n  static styles: CSSResultGroup = [componentStyles];\n  private mobileController = new MobileController(this, 'lg');\n  slots = new SlotsController(this);\n\n  @query('.dropdown__trigger')\n  trigger: HTMLElement;\n\n  @query('.dropdown__panel')\n  panel: HTMLElement;\n\n  /**\n   * Indicates whether or not the dropdown is open.\n   * You can use this in lieu of the show/hide methods.\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'is-open' })\n  isOpen = false;\n\n  /**\n   * Disables the dropdown so the panel will not open.\n   */\n  @property({ type: Boolean, attribute: 'is-disabled' })\n  isDisabled = false;\n\n  /**\n   * Determines if the dropdown trigger is a link or not.\n   */\n  @property({ type: Boolean, attribute: false })\n  isLink = false;\n\n  /**\n   * The dropdown will close when the user interacts outside of this element (e.g. clicking).\n   */\n  @property({ attribute: false })\n  containingElement?: HTMLElement;\n\n  /**\n   * The url to use for a link. This will render an anchor element.\n   * Do not set this prop if you want to render a button element.\n   */\n  @property({ type: String, attribute: 'trigger-url' })\n  triggerUrl: string;\n\n  /**\n   * Visible text for the button/link of the trigger element.\n   */\n  @property({ type: String, attribute: 'trigger-text' })\n  triggerText: string;\n\n  /**\n   * ARIA label attribute to pass down to the resulting button or a\n   * element. This is required for accessibility if we use a button\n   * with an icon only.\n   */\n  @property({ type: String, attribute: 'trigger-label' })\n  triggerLabel: string;\n\n  /**\n   * The target to use for a link, used in conjunction with the url attribute.\n   */\n  @property({ type: String, attribute: 'trigger-target' })\n  triggerTarget: LinkTargetType;\n\n  /**\n   * The button style variant to use.\n   */\n  @property({ type: String, attribute: 'trigger-variant' })\n  triggerVariant: ButtonVariant = 'link';\n\n  @state() hasHeader: boolean;\n  @state() hasDropdown: boolean;\n  @state() hasFooter: boolean;\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.hasDropdown = Boolean(this.slots.exist('dropdown'));\n    this.hasHeader = Boolean(this.slots.exist('header'));\n    this.hasFooter = Boolean(this.slots.exist('footer'));\n    // @todo: Is any of this needed?\n    this.handleButtonTrigger = this.handleButtonTrigger.bind(this);\n    this.handleIconTrigger = this.handleIconTrigger.bind(this);\n    this.handleEnterKeyDown = this.handleEnterKeyDown.bind(this);\n    this.handleEscKeyDown = this.handleEscKeyDown.bind(this);\n    this.handleFocusChange = this.handleFocusChange.bind(this);\n    this.handleIconClick = this.handleIconClick.bind(this);\n\n    if (!this.containingElement) {\n      this.containingElement = this;\n    }\n  }\n\n  updated() {\n    // This check is required for \"dropdown\" without\n    // a panel slot.\n    if (this.panel) {\n      this.panel.hidden = !this.isOpen;\n    }\n  }\n\n  firstUpdated() {}\n\n  disconnectedCallback() {\n    this.hide();\n  }\n\n  /**\n   * Shows the dropdown panel.\n   */\n  async show() {\n    // If the dropdown is already open, do nothing.\n    // If the dropdown is disabled, do nothing.\n    if (this.isOpen || this.isDisabled) {\n      return undefined;\n    }\n\n    if (this.panel) {\n      this.panel.hidden = false;\n    }\n\n    this.isOpen = true;\n    return waitForEvent(this, 'outline-after-show');\n  }\n\n  /**\n   * Hides the dropdown panel.\n   */\n  async hide() {\n    if (!this.isOpen) {\n      return undefined;\n    }\n    if (this.panel) {\n      this.panel.hidden = true;\n    }\n    this.isOpen = false;\n    return waitForEvent(this, 'outline-after-hide');\n  }\n\n  @watch('open', { waitUntilFirstUpdate: true })\n  async handleOpenChange() {\n    if (this.isDisabled) {\n      this.isOpen = false;\n      return;\n    }\n    if (this.isOpen) {\n      // Show the panel.\n      emit(this, 'outline-show');\n      emit(this, 'outline-after-show');\n    } else {\n      // Hide the panel.\n      emit(this, 'outline-hide');\n      emit(this, 'outline-after-hide');\n    }\n  }\n\n  handleDocumentMouseDown(event: MouseEvent) {\n    // Close when clicking outside of the containing element\n    const path = event.composedPath();\n    if (this.containingElement && !path.includes(this.containingElement)) {\n      this.hide();\n    }\n  }\n\n  handleEscKeyDown(event: KeyboardEvent) {\n    // @todo: This isn't working right now.\n    // Close when escape is pressed.\n    if (event.key === 'Escape') {\n      this.hide();\n      this.focusOnTrigger();\n      return;\n    }\n  }\n\n  handleFocusChange() {\n    setTimeout(() => {\n      const activeElement =\n        this.containingElement?.getRootNode() instanceof ShadowRoot\n          ? document.activeElement?.shadowRoot?.activeElement\n          : document.activeElement;\n\n      if (\n        !this.containingElement ||\n        activeElement?.closest(this.containingElement.tagName.toLowerCase()) !==\n          this.containingElement\n      ) {\n        this.hide();\n      }\n    });\n  }\n\n  handleIconClick(event: MouseEvent) {\n    event.preventDefault();\n    this.isOpen ? this.hide() : this.show();\n  }\n\n  handleEnterKeyDown(event: KeyboardEvent, isIcon = false) {\n    if (event.key === 'Enter') {\n      if (this.isDisabled) {\n        // Prevent a link from being followed.\n        // Prevent the dropdown from opening.\n        event.preventDefault();\n        return;\n      }\n\n      if ((this.triggerUrl && isIcon) || !this.triggerUrl) {\n        // This dropdown element is a link and\n        // a dropdown. We should open the dropdown when\n        // the icon is clicked.\n        this.isOpen ? this.hide() : this.show();\n        event.preventDefault();\n        return;\n      }\n\n      if (this.triggerUrl) {\n        // This button is a link.\n        // Prevent the panel from being opened via keyboard.\n        // Instead, the Enter key will navigate to the trigger url.\n        return;\n      }\n    }\n  }\n\n  focusOnTrigger() {\n    const splitButton: HTMLElement | null = this.trigger.querySelector(\n      'outline-split-button'\n    );\n\n    const regularButton: HTMLElement | null =\n      this.trigger.querySelector('outline-button');\n\n    if (splitButton && typeof splitButton?.focus === 'function') {\n      splitButton?.querySelector('button')?.focus();\n    }\n\n    if (regularButton && typeof regularButton?.focus === 'function') {\n      regularButton?.shadowRoot?.querySelector('button')?.focus();\n    }\n  }\n\n  handlePanelKeystrokes(event: KeyboardEvent) {\n    this.handleEscKeyDown(event);\n    this.handleFocusChange();\n  }\n\n  handleIconTrigger(event: KeyboardEvent) {\n    this.handleEnterKeyDown(event, true);\n    this.handleEscKeyDown(event);\n  }\n\n  handleButtonTrigger(event: KeyboardEvent) {\n    this.handleEnterKeyDown(event);\n    this.handleEscKeyDown(event);\n    this.handleFocusChange();\n  }\n\n  handleHoverStyles() {\n    // console.log('Handle the hover event. ', event);\n  }\n\n  /**\n   * @todo: Ensure there IS a dropdown before triggering the functionality.\n   * @returns {TemplateResult}\n   */\n  render(): TemplateResult {\n    return html`\n      <div\n        id=\"dropdown\"\n        class=${classMap({\n          'dropdown': true,\n          'dropdown--open': this.isOpen,\n        })}\n      >\n        <div\n          class=\"dropdown__trigger\"\n          @mouseenter=\"${!this.mobileController.isMobile ? this.show : null}\"\n          @mouseleave=\"${this.handleFocusChange}\"\n        >\n          ${this.buttonTemplate()} ${this.dropdownTemplate()}\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Template partial for the \"button\" rendering.\n   * @returns TemplateResult | null\n   */\n  buttonTemplate(): TemplateResult | null {\n    return this.triggerUrl\n      ? html`\n          <outline-split-button\n            button-variant=\"${ifDefined(this.triggerVariant)}\"\n            button-target=\"${ifDefined(this.triggerTarget)}\"\n            button-url=\"${ifDefined(this.triggerUrl)}\"\n            button-label=\"${ifDefined(this.triggerLabel)}\"\n            @mouseenter=\"${this.handleHoverStyles}\"\n            @keydown=\"${this.handleButtonTrigger}\"\n            ?is-disabled=${this.isDisabled}\n          >\n            <span\n              class=${classMap({\n                button__trigger: true,\n                button__has_menu:\n                  this.hasDropdown && this.triggerVariant == 'link',\n              })}\n              >${this.triggerText}</span\n            >\n            ${this.iconWrapperTemplate()}\n          </outline-split-button>\n        `\n      : html`\n          <outline-button\n            button-variant=\"${ifDefined(this.triggerVariant)}\"\n            button-target=\"${ifDefined(this.triggerTarget)}\"\n            button-url=\"${ifDefined(this.triggerUrl)}\"\n            button-label=\"${ifDefined(this.triggerLabel)}\"\n            @keydown=\"${this.handleButtonTrigger}\"\n            @click=\"${this.handleIconClick}\"\n            ?is-disabled=${this.isDisabled}\n          >\n            <span class=\"button__trigger\">${this.triggerText}</span>\n            ${this.iconWrapperTemplate()}\n          </outline-button>\n        `;\n  }\n\n  /**\n   * Template partial for the dropdown rendering.\n   * @returns TemplateResult | null\n   */\n  dropdownTemplate(): TemplateResult | null {\n    if (!this.hasDropdown) return null;\n\n    return html`\n      <div\n        class=\"dropdown__panel\"\n        aria-hidden=${this.isOpen ? 'false' : 'true'}\n        aria-labelledby=\"dropdown\"\n        @keydown=\"${this.handlePanelKeystrokes}\"\n      >\n        ${this.headerTemplate()} ${this.slots.renderInShadow('dropdown')}\n        ${this.footerTemplate()}\n      </div>\n    `;\n  }\n\n  /**\n   * Template partial for the icon rendering.\n   * @todo: Add SR text for button.\n   * @returns TemplateResult | null\n   */\n  iconWrapperTemplate(): TemplateResult | null {\n    if (!this.hasDropdown) return null;\n\n    return html`\n      <span\n        class=${classMap({\n          icon__trigger: true,\n          icon__bordered: this.triggerUrl && this.triggerVariant !== 'link',\n        })}\n      >\n        ${this.triggerUrl\n          ? html` <outline-button\n              class=\"icon__button\"\n              button-variant=\"${ifDefined(this.triggerVariant)}\"\n              button-target=\"${ifDefined(this.triggerTarget)}\"\n              button-label=\"${ifDefined(this.triggerLabel)}\"\n              @keydown=\"${this.handleIconTrigger}\"\n              @click=\"${this.handleIconClick}\"\n              ?is-disabled=${this.isDisabled}\n            >\n              ${this.iconTemplate()}\n              <span class=\"sr-only\"\n                >Sub-navigation for ${this.triggerText}</span\n              >\n            </outline-button>`\n          : html` ${this.iconTemplate()} `}\n      </span>\n    `;\n  }\n\n  /**\n   * Template partial for the icon rendering.\n   * @todo: Ensure chevron can be swapped out for other icons.\n   * @todo: Ensure \"standard\" chevron-down can be replaced/rotated when menu is open.\n   * @returns TemplateResult | null\n   */\n  iconTemplate(): TemplateResult | null {\n    return html`\n      <outline-icon\n        slot=\"right\"\n        name=\"${this.isOpen ? 'chevron-up' : 'chevron-down'}\"\n        library=\"system\"\n        size=\"1em\"\n        ?label=\"${ifDefined(this.triggerUrl) ? this.triggerLabel : false}\"\n      ></outline-icon>\n    `;\n  }\n\n  /**\n   * Template partial for the header rendering.\n   * @returns TemplateResult | null\n   */\n  headerTemplate(): TemplateResult | null {\n    if (!this.hasHeader) return null;\n    return html`${this.slots.renderInShadow('header')}`;\n  }\n\n  /**\n   * Template partial for the footer rendering.\n   * @returns TemplateResult | null\n   */\n  footerTemplate(): TemplateResult | null {\n    if (!this.hasFooter) return null;\n    return html`${this.slots.renderInShadow('footer')}`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'outline-dropdown': OutlineDropdown;\n  }\n}\n"],"names":["componentStyles","css","OutlineDropdown","OutlineElement","MobileController","SlotsController","waitForEvent","emit","event","path","activeElement","_a","_c","_b","isIcon","splitButton","regularButton","html","classMap","ifDefined","__decorateClass","query","property","state","watch","customElement"],"mappings":"2qBAEA,MAAAA,EAAeC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,kMCqCF,IAAAC,EAAN,cAA8BC,CAAe,CAA7C,aAAA,CAAA,MAAA,GAAA,SAAA,EAEL,KAAQ,iBAAmB,IAAIC,EAAiB,KAAM,IAAI,EAClD,KAAA,MAAA,IAAIC,EAAgB,IAAI,EAavB,KAAA,OAAA,GAMI,KAAA,WAAA,GAMJ,KAAA,OAAA,GAuCuB,KAAA,eAAA,MAAA,CAMhC,mBAAoB,CAClB,MAAM,kBAAkB,EACxB,KAAK,YAAc,EAAQ,KAAK,MAAM,MAAM,UAAU,EACtD,KAAK,UAAY,EAAQ,KAAK,MAAM,MAAM,QAAQ,EAClD,KAAK,UAAY,EAAQ,KAAK,MAAM,MAAM,QAAQ,EAElD,KAAK,oBAAsB,KAAK,oBAAoB,KAAK,IAAI,EAC7D,KAAK,kBAAoB,KAAK,kBAAkB,KAAK,IAAI,EACzD,KAAK,mBAAqB,KAAK,mBAAmB,KAAK,IAAI,EAC3D,KAAK,iBAAmB,KAAK,iBAAiB,KAAK,IAAI,EACvD,KAAK,kBAAoB,KAAK,kBAAkB,KAAK,IAAI,EACzD,KAAK,gBAAkB,KAAK,gBAAgB,KAAK,IAAI,EAEhD,KAAK,oBACR,KAAK,kBAAoB,KAE7B,CAEA,SAAU,CAGJ,KAAK,QACF,KAAA,MAAM,OAAS,CAAC,KAAK,OAE9B,CAEA,cAAe,CAAC,CAEhB,sBAAuB,CACrB,KAAK,KAAK,CACZ,CAKA,MAAM,MAAO,CAGP,GAAA,OAAK,QAAU,KAAK,YAIxB,OAAI,KAAK,QACP,KAAK,MAAM,OAAS,IAGtB,KAAK,OAAS,GACPC,EAAa,KAAM,oBAAoB,CAChD,CAKA,MAAM,MAAO,CACP,GAAC,KAAK,OAGV,OAAI,KAAK,QACP,KAAK,MAAM,OAAS,IAEtB,KAAK,OAAS,GACPA,EAAa,KAAM,oBAAoB,CAChD,CAGA,MAAM,kBAAmB,CACvB,GAAI,KAAK,WAAY,CACnB,KAAK,OAAS,GACd,MACF,CACI,KAAK,QAEPC,EAAK,KAAM,cAAc,EACzBA,EAAK,KAAM,oBAAoB,IAG/BA,EAAK,KAAM,cAAc,EACzBA,EAAK,KAAM,oBAAoB,EAEnC,CAEA,wBAAwBC,EAAmB,CAEnC,MAAAC,EAAOD,EAAM,eACf,KAAK,mBAAqB,CAACC,EAAK,SAAS,KAAK,iBAAiB,GACjE,KAAK,KAAK,CAEd,CAEA,iBAAiBD,EAAsB,CAGjC,GAAAA,EAAM,MAAQ,SAAU,CAC1B,KAAK,KAAK,EACV,KAAK,eAAe,EACpB,MACF,CACF,CAEA,mBAAoB,CAClB,WAAW,IAAM,WACT,MAAAE,IACJC,EAAA,KAAK,oBAAL,YAAAA,EAAwB,yBAAyB,YAC7CC,GAAAC,EAAA,SAAS,gBAAT,YAAAA,EAAwB,aAAxB,YAAAD,EAAoC,cACpC,SAAS,eAGb,CAAC,KAAK,oBACNF,GAAA,YAAAA,EAAe,QAAQ,KAAK,kBAAkB,QAAQ,YAAY,MAChE,KAAK,oBAEP,KAAK,KAAK,CACZ,CACD,CACH,CAEA,gBAAgBF,EAAmB,CACjCA,EAAM,eAAe,EACrB,KAAK,OAAS,KAAK,KAAK,EAAI,KAAK,MACnC,CAEA,mBAAmBA,EAAsBM,EAAS,GAAO,CACnD,GAAAN,EAAM,MAAQ,QAAS,CACzB,GAAI,KAAK,WAAY,CAGnBA,EAAM,eAAe,EACrB,MACF,CAEA,GAAK,KAAK,YAAcM,GAAW,CAAC,KAAK,WAAY,CAInD,KAAK,OAAS,KAAK,KAAK,EAAI,KAAK,OACjCN,EAAM,eAAe,EACrB,MACF,CAEA,GAAI,KAAK,WAIP,MAEJ,CACF,CAEA,gBAAiB,WACT,MAAAO,EAAkC,KAAK,QAAQ,cACnD,sBAAA,EAGIC,EACJ,KAAK,QAAQ,cAAc,gBAAgB,EAEzCD,GAAe,OAAOA,GAAA,YAAAA,EAAa,QAAU,cAClCJ,EAAAI,GAAA,YAAAA,EAAA,cAAc,YAAd,MAAAJ,EAAyB,SAGpCK,GAAiB,OAAOA,GAAA,YAAAA,EAAe,QAAU,cACnDJ,GAAAC,EAAAG,GAAA,YAAAA,EAAe,aAAf,YAAAH,EAA2B,cAAc,YAAzC,MAAAD,EAAoD,QAExD,CAEA,sBAAsBJ,EAAsB,CAC1C,KAAK,iBAAiBA,CAAK,EAC3B,KAAK,kBAAkB,CACzB,CAEA,kBAAkBA,EAAsB,CACjC,KAAA,mBAAmBA,EAAO,EAAI,EACnC,KAAK,iBAAiBA,CAAK,CAC7B,CAEA,oBAAoBA,EAAsB,CACxC,KAAK,mBAAmBA,CAAK,EAC7B,KAAK,iBAAiBA,CAAK,EAC3B,KAAK,kBAAkB,CACzB,CAEA,mBAAoB,CAEpB,CAMA,QAAyB,CAChB,OAAAS;AAAAA;AAAAA;AAAAA,gBAGKC,EAAS,CACf,SAAY,GACZ,iBAAkB,KAAK,MAAA,CACxB,CAAC;AAAA;AAAA;AAAA;AAAA,yBAIgB,KAAK,iBAAiB,SAAuB,KAAZ,KAAK,IAAW;AAAA,yBAClD,KAAK,iBAAiB;AAAA;AAAA,YAEnC,KAAK,eAAgB,CAAA,IAAI,KAAK,kBAAkB;AAAA;AAAA;AAAA,KAI1D,CAMA,gBAAwC,CACtC,OAAO,KAAK,WACRD;AAAAA;AAAAA,8BAEsBE,EAAU,KAAK,cAAc,CAAC;AAAA,6BAC/BA,EAAU,KAAK,aAAa,CAAC;AAAA,0BAChCA,EAAU,KAAK,UAAU,CAAC;AAAA,4BACxBA,EAAU,KAAK,YAAY,CAAC;AAAA,2BAC7B,KAAK,iBAAiB;AAAA,wBACzB,KAAK,mBAAmB;AAAA,2BACrB,KAAK,UAAU;AAAA;AAAA;AAAA,sBAGpBD,EAAS,CACf,gBAAiB,GACjB,iBACE,KAAK,aAAe,KAAK,gBAAkB,MAAA,CAC9C,CAAC;AAAA,iBACC,KAAK,WAAW;AAAA;AAAA,cAEnB,KAAK,qBAAqB;AAAA;AAAA,UAGhCD;AAAAA;AAAAA,8BAEsBE,EAAU,KAAK,cAAc,CAAC;AAAA,6BAC/BA,EAAU,KAAK,aAAa,CAAC;AAAA,0BAChCA,EAAU,KAAK,UAAU,CAAC;AAAA,4BACxBA,EAAU,KAAK,YAAY,CAAC;AAAA,wBAChC,KAAK,mBAAmB;AAAA,sBAC1B,KAAK,eAAe;AAAA,2BACf,KAAK,UAAU;AAAA;AAAA,4CAEE,KAAK,WAAW;AAAA,cAC9C,KAAK,qBAAqB;AAAA;AAAA,SAGtC,CAMA,kBAA0C,CACxC,OAAK,KAAK,YAEHF;AAAAA;AAAAA;AAAAA,sBAGW,KAAK,OAAS,QAAU,MAAM;AAAA;AAAA,oBAEhC,KAAK,qBAAqB;AAAA;AAAA,UAEpC,KAAK,gBAAgB,IAAI,KAAK,MAAM,eAAe,UAAU,CAAC;AAAA,UAC9D,KAAK,gBAAgB;AAAA;AAAA,MAVG,IAahC,CAOA,qBAA6C,CAC3C,OAAK,KAAK,YAEHA;AAAAA;AAAAA,gBAEKC,EAAS,CACf,cAAe,GACf,eAAgB,KAAK,YAAc,KAAK,iBAAmB,MAAA,CAC5D,CAAC;AAAA;AAAA,UAEA,KAAK,WACHD;AAAAA;AAAAA,gCAEoBE,EAAU,KAAK,cAAc,CAAC;AAAA,+BAC/BA,EAAU,KAAK,aAAa,CAAC;AAAA,8BAC9BA,EAAU,KAAK,YAAY,CAAC;AAAA,0BAChC,KAAK,iBAAiB;AAAA,wBACxB,KAAK,eAAe;AAAA,6BACf,KAAK,UAAU;AAAA;AAAA,gBAE5B,KAAK,cAAc;AAAA;AAAA,sCAEG,KAAK,WAAW;AAAA;AAAA,+BAG1CF,KAAQ,KAAK,aAAa,CAAC,GAAG;AAAA;AAAA,MAxBR,IA2BhC,CAQA,cAAsC,CAC7B,OAAAA;AAAAA;AAAAA;AAAAA,gBAGK,KAAK,OAAS,aAAe,cAAc;AAAA;AAAA;AAAA,kBAGzCE,EAAU,KAAK,UAAU,EAAI,KAAK,aAAe,EAAK;AAAA;AAAA,KAGtE,CAMA,gBAAwC,CACtC,OAAK,KAAK,UACHF,IAAO,KAAK,MAAM,eAAe,QAAQ,CAAC,GADrB,IAE9B,CAMA,gBAAwC,CACtC,OAAK,KAAK,UACHA,IAAO,KAAK,MAAM,eAAe,QAAQ,CAAC,GADrB,IAE9B,CACF,EA/Zaf,EACJ,OAAyB,CAACF,CAAe,EAKhDoB,EAAA,CADCC,EAAM,oBAAoB,CAAA,EALhBnB,EAMX,UAAA,UAAA,CAAA,EAGAkB,EAAA,CADCC,EAAM,kBAAkB,CAAA,EARdnB,EASX,UAAA,QAAA,CAAA,EAOAkB,EAAA,CADCE,EAAS,CAAE,KAAM,QAAS,QAAS,GAAM,UAAW,UAAW,CAAA,EAfrDpB,EAgBX,UAAA,SAAA,CAAA,EAMAkB,EAAA,CADCE,EAAS,CAAE,KAAM,QAAS,UAAW,cAAe,CAAA,EArB1CpB,EAsBX,UAAA,aAAA,CAAA,EAMAkB,EAAA,CADCE,EAAS,CAAE,KAAM,QAAS,UAAW,GAAO,CAAA,EA3BlCpB,EA4BX,UAAA,SAAA,CAAA,EAMAkB,EAAA,CADCE,EAAS,CAAE,UAAW,GAAO,CAAA,EAjCnBpB,EAkCX,UAAA,oBAAA,CAAA,EAOAkB,EAAA,CADCE,EAAS,CAAE,KAAM,OAAQ,UAAW,cAAe,CAAA,EAxCzCpB,EAyCX,UAAA,aAAA,CAAA,EAMAkB,EAAA,CADCE,EAAS,CAAE,KAAM,OAAQ,UAAW,eAAgB,CAAA,EA9C1CpB,EA+CX,UAAA,cAAA,CAAA,EAQAkB,EAAA,CADCE,EAAS,CAAE,KAAM,OAAQ,UAAW,gBAAiB,CAAA,EAtD3CpB,EAuDX,UAAA,eAAA,CAAA,EAMAkB,EAAA,CADCE,EAAS,CAAE,KAAM,OAAQ,UAAW,iBAAkB,CAAA,EA5D5CpB,EA6DX,UAAA,gBAAA,CAAA,EAMAkB,EAAA,CADCE,EAAS,CAAE,KAAM,OAAQ,UAAW,kBAAmB,CAAA,EAlE7CpB,EAmEX,UAAA,iBAAA,CAAA,EAESkB,EAAA,CAARG,EAAM,CAAA,EArEIrB,EAqEF,UAAA,YAAA,CAAA,EACAkB,EAAA,CAARG,EAAM,CAAA,EAtEIrB,EAsEF,UAAA,cAAA,CAAA,EACAkB,EAAA,CAARG,EAAM,CAAA,EAvEIrB,EAuEF,UAAA,YAAA,CAAA,EAmEHkB,EAAA,CADLI,EAAM,OAAQ,CAAE,qBAAsB,GAAM,CAAA,EAzIlCtB,EA0IL,UAAA,mBAAA,CAAA,EA1IKA,EAANkB,EAAA,CADNK,EAAc,kBAAkB,CAAA,EACpBvB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}