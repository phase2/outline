{"version":3,"file":"vars-link.css.lit-8fdd0acf.js","sources":["../../packages/components/@deprecated/outline-link/src/outline-link.css.lit.ts","../../packages/components/@deprecated/outline-link/src/outline-link.ts","../../packages/components/@deprecated/outline-link/src/css-variables/vars-link.css.lit.ts"],"sourcesContent":["\nimport { css } from 'lit';\nexport default css`\n/* Apply component specific CSS */\n:host{\n  --outline-link--color--computed:var(--outline-link--color, var(--outline-blue-600));\n  --outline-link--text-decoration--computed:var(--outline-link--text-decoration, none);\n  --outline-link--color-hover--computed:var(--outline-link--color-hover, var(--outline-gray-600));\n  --outline-link--text-decoration-hover--computed:var(--outline-link--text-decoration-hover, underline);\n  --outline-link--color-focus--computed:var(--outline-link--color-focus, var(--outline-gray-600));\n  --outline-link--text-decoration-focus--computed:var(--outline-link--text-decoration-focus, underline);\n  --outline-link--transition-property--computed:var(--outline-link--transition-property, color, background-color, border-color, text-decoration-color, fill, stroke);\n  --outline-link--transition-duration--computed:var(--outline-link--transition-duration, 150ms);\n  --outline-link--transition-timing-function--computed:var(--outline-link--transition-timing-function, cubic-bezier(0.4, 0, 0.2, 1));\n}\n\na,\n::slotted(a){\n  font-family:var(--ff-body);\n  -webkit-text-decoration:var(--outline-link--text-decoration--computed);\n          text-decoration:var(--outline-link--text-decoration--computed);\n  color:var(--outline-link--color--computed);\n  transition-property:var(--outline-link--transition-property--computed);\n  transition-timing-function:var(\n    --outline-link--transition-timing-function--computed\n  );\n  transition-duration:var(--outline-link--transition-duration--computed);\n}\n\na:hover,\n::slotted(a:hover){\n  -webkit-text-decoration:var(--outline-link--text-decoration-hover--computed);\n          text-decoration:var(--outline-link--text-decoration-hover--computed);\n  color:var(--outline-link--color-hover--computed);\n}\n\na:focus,\n::slotted(a:focus){\n  -webkit-text-decoration:var(--outline-link--text-decoration-focus--computed);\n          text-decoration:var(--outline-link--text-decoration-focus--computed);\n  color:var(--outline-link--color-focus--computed);\n  outline:none;\n}\n`;","import { html, TemplateResult, CSSResultGroup } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\n// Our base component, which all others extend.\nimport { OutlineElement } from '@phase2/outline-core';\n\nimport type { LinkTargetType, LinkRelType } from './config';\nimport componentStyles from './outline-link.css.lit';\n\n/**\n * The Outline  Link component\n *\n * @element outline-link\n * @extends OutlineElement\n * @slot - The default slot for this element.\n * @cssprop --outline-link-transition-property: The CSS transition property to use for the link.\n * @cssprop --outline-link-transition-duration: The CSS transition duration to use for the link.\n * @cssprop --outline-link-transition-timing-function: The CSS transition timing function to use for the link.\n * @cssprop --outline-link-color-default: The default link color.\n * @cssprop --outline-link-color-default-decoration: Text decoration for the default link.\n * @cssprop --outline-link-color-hover: The link color when hovering on the link.\n * @cssprop --outline-link-color-hover-decoration: Text decoration for the link when hovering.\n * @cssprop --outline-link-color-focus: The link color when focusing on the link.\n * @todo - Add support for outline/ring on the focus state of the link.\n */\n@customElement('outline-link')\nexport class OutlineLink extends OutlineElement {\n  static styles: CSSResultGroup = [componentStyles];\n  /**\n   * Link url\n   */\n  @property({ type: String, attribute: 'link-href' })\n  linkHref: string | boolean = false;\n\n  /**\n   * Link text\n   */\n  @property({ type: String, attribute: 'link-text' })\n  linkText: string | boolean = false;\n\n  /**\n   * Link target\n   */\n  @property({ type: String, attribute: 'link-target' })\n  linkTarget: LinkTargetType;\n\n  /**\n   * Link rel\n   */\n  @property({ type: String, attribute: 'link-rel' })\n  linkRel: LinkRelType;\n\n  /**\n   * This methodology allows us to create a component that can use properties\n   * passed into it to generate a link element (<a>). This requires the linkHref\n   * attribute is passed, otherwise, anything passed in will override the default\n   * content in the slot allowing you to pass a pre-generated link into the\n   * outline-link component wrapper.\n   */\n  render(): TemplateResult {\n    return html`${this.linkHref\n      ? html` <a\n          href=${this.linkHref}\n          rel=\"${ifDefined(this.linkRel)}\"\n          target=\"${ifDefined(this.linkTarget)}\"\n        >\n          ${this.linkText ? html`${this.linkText}` : html`<slot></slot>`}\n        </a>`\n      : html`<slot></slot>`}`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'outline-link': OutlineLink;\n  }\n}\n","\nimport { css } from 'lit';\nexport default css`\n/* Apply CSS Variables to the host element. */\n:host{\n  --outline-link--color--computed:var(--outline-link--color, var(--outline-blue-600));\n  --outline-link--text-decoration--computed:var(--outline-link--text-decoration, none);\n  --outline-link--color-hover--computed:var(--outline-link--color-hover, var(--outline-gray-600));\n  --outline-link--text-decoration-hover--computed:var(--outline-link--text-decoration-hover, underline);\n  --outline-link--color-focus--computed:var(--outline-link--color-focus, var(--outline-gray-600));\n  --outline-link--text-decoration-focus--computed:var(--outline-link--text-decoration-focus, underline);\n  --outline-link--transition-property--computed:var(--outline-link--transition-property, color, background-color, border-color, text-decoration-color, fill, stroke);\n  --outline-link--transition-duration--computed:var(--outline-link--transition-duration, 150ms);\n  --outline-link--transition-timing-function--computed:var(--outline-link--transition-timing-function, cubic-bezier(0.4, 0, 0.2, 1));\n}\n`;"],"names":["componentStyles","css","OutlineLink","OutlineElement","html","ifDefined","__decorateClass","property","customElement","linkVars"],"mappings":"6MAEA,MAAAA,EAAeC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,kMCyBF,IAAAC,EAAN,cAA0BC,CAAe,CAAzC,aAAA,CAAA,MAAA,GAAA,SAAA,EAMwB,KAAA,SAAA,GAMA,KAAA,SAAA,EAAA,CAqB7B,QAAyB,CAChB,OAAAC,IAAO,KAAK,SACfA;AAAAA,iBACS,KAAK,QAAQ;AAAA,iBACbC,EAAU,KAAK,OAAO,CAAC;AAAA,oBACpBA,EAAU,KAAK,UAAU,CAAC;AAAA;AAAA,YAElC,KAAK,SAAWD,IAAO,KAAK,QAAQ,GAAKA,gBAAmB;AAAA,cAEhEA,gBAAmB,EACzB,CACF,EA5CaF,EACJ,OAAyB,CAACF,CAAe,EAKhDM,EAAA,CADCC,EAAS,CAAE,KAAM,OAAQ,UAAW,YAAa,CAAA,EALvCL,EAMX,UAAA,WAAA,CAAA,EAMAI,EAAA,CADCC,EAAS,CAAE,KAAM,OAAQ,UAAW,YAAa,CAAA,EAXvCL,EAYX,UAAA,WAAA,CAAA,EAMAI,EAAA,CADCC,EAAS,CAAE,KAAM,OAAQ,UAAW,cAAe,CAAA,EAjBzCL,EAkBX,UAAA,aAAA,CAAA,EAMAI,EAAA,CADCC,EAAS,CAAE,KAAM,OAAQ,UAAW,WAAY,CAAA,EAvBtCL,EAwBX,UAAA,UAAA,CAAA,EAxBWA,EAANI,EAAA,CADNE,EAAc,cAAc,CAAA,EAChBN,CAAA,ECzBb,MAAAO,EAAeR;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;"}