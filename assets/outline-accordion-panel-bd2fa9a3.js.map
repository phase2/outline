{"version":3,"file":"outline-accordion-panel-bd2fa9a3.js","sources":["../../packages/components/@deprecated/outline-accordion/src/outline-accordion.css.lit.ts","../../packages/components/@deprecated/outline-accordion/src/outline-accordion.ts","../../packages/components/@deprecated/outline-accordion/src/outline-accordion-panel/outline-accordion-panel.css.lit.ts","../../packages/components/@deprecated/outline-accordion/src/outline-accordion-panel/outline-accordion-panel.ts"],"sourcesContent":["\nimport { css } from 'lit';\nexport default css`\n/* Apply component specific CSS */\n.accordion-title {\n  font-family: var(--ff-display);\n  font-size: var(--fs-4xl);\n  line-height: var(--lh-4xl);\n  color: var(--outline-soft-black);\n}\n\n.accordion-title.mobile {\n  font-size: var(--fs-lg);\n  line-height: var(--lh-lg);\n  color: var(--outline-soft-black);\n}\n\n::slotted(outline-heading){\n  margin-bottom:2.5rem;\n}\n`;","import { html, TemplateResult, CSSResultGroup } from 'lit';\nimport {\n  customElement,\n  property,\n  queryAssignedElements,\n} from 'lit/decorators.js';\nimport {\n  OutlineElement,\n  MobileController,\n  SlotsController,\n} from '@phase2/outline-core';\nimport componentStyles from './outline-accordion.css.lit';\nimport { OutlineAccordionPanel } from './outline-accordion-panel/outline-accordion-panel';\n\n/**\n * Accordion Component\n * @element outline-accordion\n * @slot label: The title text for the accordion component.\n * @slot panels: For outline-accordion-panels only.\n */\n@customElement('outline-accordion')\nexport class OutlineAccordion extends OutlineElement {\n  private mobileController = new MobileController(this);\n  slots = new SlotsController(this);\n  static styles: CSSResultGroup = [componentStyles];\n\n  /**\n   * Sets to 'clean' variant\n   */\n  @property({ type: Boolean })\n  clean = false;\n\n  /**\n   * Set to 'true' to create an accordion that can only have one panel open at a time.\n   */\n  @property({ type: Boolean, attribute: 'single-panel' })\n  singlePanel = false;\n\n  /**\n   * Set to 'true' to open all panels at once. Specifically for enhanced editor experience.\n   */\n  @property({ type: Boolean })\n  allOpen = false;\n\n  /**\n   * Reference to <outline-accordion-panels> in panels slot.\n   */\n  @queryAssignedElements({ slot: 'panels' })\n  panels: OutlineAccordionPanel[];\n\n  render(): TemplateResult {\n    return html`\n      ${this.slots.conditionalSlot('label', false)}\n\n      <div class=\"accordion\" @keydown=${this.handleKeyboardNav}>\n        <slot name=\"panels\"></slot>\n      </div>\n    `;\n  }\n\n  /**\n   * Takes the element id of content <div>\n   * to maintain state list of active/open panels.\n   */\n\n  /**\n   * @returns string | null\n   * Checks if the window is at mobile size.\n   */\n  isMobile = () => (this.mobileController.isMobile ? 'mobile' : null);\n\n  /**\n   * @param event\n   * @returns void\n   * Adds up/down arrow keyboard navigation.\n   * TODO: try to refactor to something simpler.\n   */\n  handleKeyboardNav(event: KeyboardEvent) {\n    let index = 0;\n    const panels = this.panels;\n    const start = Array.prototype.indexOf.call(\n      panels,\n      event.target as HTMLElement\n    );\n\n    // bail on wrong key\n    if (event.key !== 'ArrowDown' && event.key !== 'ArrowUp') {\n      return;\n    }\n    if (event.key === 'ArrowDown') {\n      if (panels?.length && start + 1 > panels?.length - 1) {\n        index = 0;\n      } else index = start + 1;\n    }\n    if (event.key === 'ArrowUp') {\n      if (panels?.length && start - 1 < 0) {\n        index = panels?.length - 1;\n      } else index = start - 1;\n    }\n    const focusTarget = panels?.[index] as unknown as HTMLElement;\n    focusTarget.shadowRoot?.querySelector('button')?.focus();\n  }\n\n  /**\n   * Sets 'clean' and 'active states on\n   * child <outline-accordion-panel> elements when the accordion updates.\n   */\n\n  firstUpdated() {\n    if (this.allOpen) {\n      this.panels.map(panel => {\n        panel.setAttribute('active', 'active');\n      });\n    }\n  }\n  updated() {\n    if (this.clean) {\n      this.panels.map(panel => panel.setAttribute('clean', 'clean'));\n    } else {\n      this.panels.map(panel => panel.removeAttribute('clean'));\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'outline-accordion': OutlineAccordion;\n  }\n}\n","\nimport { css } from 'lit';\nexport default css`\n/* Apply component specific CSS */\n:host([aria-hidden='true']),\n[aria-hidden='true'],\n.visually-hidden{\n  position:absolute !important;\n  overflow:hidden;\n  clip:rect(1px, 1px, 1px, 1px);\n  width:1px;\n  height:1px;\n  word-wrap:normal;\n}\n\n.accordion-button {\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: space-between;\n  border-width: 0px;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  padding-left: 2rem;\n  padding-right: 0px;\n}\n\n.accordion-button.mobile {\n  padding-top: 0px !important;\n  padding-bottom: 0px !important;\n  padding-left: 1rem !important;\n  padding-right: 0px !important;\n  font-size: var(--fs-base) !important;\n  line-height: 1.25rem !important;\n}\n\n.accordion-button.active {\n  background-color: var(--outline-soft-black);\n  color: var(--outline-white);\n}\n\n.accordion-button.inactive {\n  background-color: var(--outline-white);\n  color: var(--outline-soft-black);\n}\n\n.accordion-button.clean {\n  border-bottom-width: 1px;\n  border-style: solid;\n  border-color: var(--outline-gray-300);\n  padding-left: 0px;\n}\n\n.accordion-button.clean.active {\n  background-color: var(--outline-white) !important;\n  color: var(--outline-soft-black) !important;\n}\n\n.accordion-button.clean.inactive {\n  color: var(--outline-soft-black);\n}\n\n.accordion-content {\n  padding-left: 2rem;\n  padding-right: 2rem;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n}\n\n.accordion-content.mobile {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n\n.clean .accordion-content {\n  padding-left: 0px;\n  padding-right: 0px;\n}\n\n.accordion-label {\n  text-align: left;\n  max-width:75%;\n}\n\n::slotted(outline-heading){\n  margin:1rem 0;\n}\n\n.accordion-heading {\n  margin: 0px;\n  display: flex;\n}\n\n.accordion-icon {\n  display: flex;\n  height: 100%;\n  width: 5rem;\n  align-items: center;\n  justify-content: center;\n}\n\n.accordion-icon.clean {\n  background-color: var(--outline-white) !important;\n  color: var(--outline-soft-black) !important;\n}\n\n.accordion-icon.active {\n  background-color: var(--outline-soft-black);\n  color: var(--outline-white);\n}\n\n.accordion-icon.inactive {\n  background-color: var(--outline-gray-600);\n  color: var(--outline-white);\n}\n\n.accordion-panel {\n  margin-bottom: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  border-radius: 0.375rem;\n  border-width: 1px;\n  border-style: solid;\n  border-color: var(--outline-soft-black);\n}\n\n.accordion-panel.clean {\n  border-width: 0px;\n}\n`;","import { CSSResultGroup, TemplateResult, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport { OutlineElement, MobileController } from '@phase2/outline-core';\nimport componentStyles from './outline-accordion-panel.css.lit';\n\nimport { OutlineAccordion } from '../outline-accordion';\nimport '@phase2/outline-icon';\n\n/**\n * The OutlineAccordionPanel component\n * @element outline-accordion-panel\n * @extends OutlineElement\n * @slot heading: The title text for the panel component.\n * @slot default slot: The main panel content, visible when the panel is open.\n * @todo: Consider the icon as a slot.\n */\n@customElement('outline-accordion-panel')\nexport class OutlineAccordionPanel extends OutlineElement {\n  private mobileController = new MobileController(this);\n\n  static styles: CSSResultGroup = [componentStyles];\n\n  /**\n   * Sets to 'clean' variant.\n   * Controlled by parent accordion component.\n   */\n  @property({ type: Boolean })\n  clean = false;\n\n  /**\n   * Wether the panel is active/open.\n   * Controlled by parent accordion component.\n   */\n  @property({ type: Boolean, reflect: true, attribute: true })\n  active = false;\n\n  /**\n   * Used to provided a unique ID\n   * for accordion component and accessibility purposes.\n   */\n  @property({ type: String, reflect: true })\n  id: string = Math.floor(Math.random() * 10000).toString();\n\n  render(): TemplateResult {\n    const isMobile = this.mobileController.isMobile ? 'mobile' : null;\n    const isClean = this.clean ? 'clean' : null;\n    const isActive = this.active ? 'active' : 'inactive';\n\n    return html` <div class=\"accordion-panel ${isClean}\">\n      <div class=\"accordion-heading\">\n        <button\n          class=\"accordion-button ${isMobile} ${isActive} ${isClean}\"\n          id=\"${this.id}-button\"\n          aria-expanded=${this.active}\n          aria-controls=\"${this.id}-info\"\n          @click=${this.setActive}\n        >\n          <span class=\"accordion-label ${isMobile}\">\n            <slot name=\"heading\"> </slot>\n          </span>\n          <span class=\"accordion-icon ${isMobile} ${isActive} ${isClean}\">\n            <outline-icon\n              name=\"${this.active ? 'chevron-up' : 'chevron-down'}\"\n              size=\"24px\"\n            ></outline-icon>\n          </span>\n        </button>\n      </div>\n      <div\n        class=\"accordion-content ${isMobile}\"\n        role=\"region\"\n        aria-labelledby=\"${this.id}-button\"\n        id=\"${this.id}-info\"\n        aria-hidden=\"${!this.active}\"\n      >\n        <slot></slot>\n      </div>\n    </div>`;\n  }\n\n  setActive() {\n    const parentWrapper = this.parentElement as OutlineAccordion;\n    const singlePanel = parentWrapper.singlePanel;\n\n    if (singlePanel) {\n      const activePanels = [...parentWrapper.panels].filter(\n        panel => panel.active == true\n      );\n\n      if (activePanels.length < 1) {\n        this.active = true;\n      }\n\n      if (activePanels.length > 0) {\n        activePanels.map(panel => {\n          if (panel.id === this.id) {\n            this.active = false;\n          } else {\n            panel.active = false;\n            this.active = true;\n          }\n        });\n      }\n    } else {\n      this.active = !this.active;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'outline-accordion-panel': OutlineAccordionPanel;\n  }\n}\n"],"names":["componentStyles$1","css","OutlineAccordion","OutlineElement","MobileController","SlotsController","html","event","index","panels","start","_b","_a","panel","componentStyles","__decorateClass","property","queryAssignedElements","customElement","OutlineAccordionPanel","isMobile","isClean","isActive","parentWrapper","activePanels"],"mappings":"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"}