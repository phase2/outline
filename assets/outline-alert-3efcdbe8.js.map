{"version":3,"file":"outline-alert-3efcdbe8.js","sources":["../../packages/components/@deprecated/outline-alert/src/outline-alert.css.lit.ts","../../packages/components/@deprecated/outline-alert/src/outline-alert.ts"],"sourcesContent":["\nimport { css } from 'lit';\nexport default css`\n/* Apply component specific CSS */\n:host{\n  --outline-alert--info-background--computed:var(--outline-alert--info-background, var(--outline-white));\n  --outline-alert--info-text--computed:var(--outline-alert--info-text,var( --status-info));\n  --outline-alert--info-border--computed:var(--outline-alert--info-border, var(--status-info));\n\n  --outline-alert--success-background--computed:var(--outline-alert--success-background, var(--outline-white));\n  --outline-alert--success-text--computed:var(--outline-alert--success-text, var(--status-success));\n  --outline-alert--success-border--computed:var(--outline-alert--success-border, var(--status-success));\n\n  --outline-alert--warning-background--computed:var(--outline-alert--warning-background, var(--outline-white));\n  --outline-alert--warning-text--computed:var(--outline-alert--warning-text, var(--status-warning));\n  --outline-alert--warning-border--computed:var(--outline-alert--warning-border, var(--status-warning));\n\n  --outline-alert--error-background--computed:var(--outline-alert--error-background, var(--outline-white));\n  --outline-alert--error-text--computed:var(--outline-alert--error-text, var(--status-error));\n  --outline-alert--error-border--computed:var(--outline-alert--error-border, var(--status-error));\n}\n\n.alert-body{\n  display:block;\n  border-width:0;\n  border-left-width:8px;\n  border-style:solid;\n  padding:1rem;\n}\n\n.alert-header{\n  font-size:var(--fs-lg);\n  line-height:var(--lh-lg);\n  font-weight:var(--fw-bold);\n  text-transform:capitalize;\n}\n\n:host([status='info']) .alert-body{\n  background-color:var(--outline-alert--info-background--computed);\n  border-color:var(--outline-alert--info-border--computed);\n  color:var(--outline-alert--info-text--computed);\n}\n\n:host([status='warning']) .alert-body{\n  background-color:var(--outline-alert--warning-background--computed);\n  border-color:var(--outline-alert--warning-border--computed);\n  color:var(--outline-alert--warning-text--computed);\n}\n\n:host([status='error']) .alert-body{\n  background-color:var(--outline-alert--error-background--computed);\n  border-color:var(--outline-alert--error-border--computed);\n  color:var(--outline-alert--error-text--computed);\n}\n\n:host([status='success']) .alert-body{\n  background-color:var(--outline-alert--success-background--computed);\n  border-color:var(--outline-alert--success-border--computed);\n  color:var(--outline-alert--success-text--computed);\n}\n`;","import { html, TemplateResult, CSSResultGroup } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { OutlineElement } from '@phase2/outline-core';\nimport componentStyles from './outline-alert.css.lit';\n\nexport const alertSizes = ['small', 'large'] as const;\nexport type AlertSize = (typeof alertSizes)[number];\n\nexport const alertStatusTypes = [\n  'info',\n  'warning',\n  'error',\n  'success',\n] as const;\nexport type AlertStatusType = (typeof alertStatusTypes)[number];\n\n// This can be useful for testing.\nexport interface OutlineAlertInterface extends HTMLElement {\n  status: AlertStatusType;\n  size: AlertSize;\n  isInteractive: boolean;\n  shouldShowIcon: boolean;\n}\n\n/**\n * The Outline Alert component\n *\n * @element outline-alert\n * @extends OutlineElement\n * @slot default - The alert contents.\n * @slot header - The header in the alert.\n * @cssprop --outline-alert--info-background: The background color for the info alert.\n * @cssprop --outline-alert--info-text: The text color for the info alert.\n * @cssprop --outline-alert--info-border: The border color for the info alert.\n * @cssprop --outline-alert--success-background: The background color for the success alert.\n * @cssprop --outline-alert--success-text: The text color for the success alert.\n * @cssprop --outline-alert--success-border: The border color for the success alert.\n * @cssprop --outline-alert--warning-background: The background color for the warning alert.\n * @cssprop --outline-alert--warning-text: The text color for the warning alert.\n * @cssprop --outline-alert--warning-border: The border color for the warning alert.\n * @cssprop --outline-alert--error-background: The background color for the error alert.\n * @cssprop --outline-alert--error-text: The text color for the error alert.\n * @cssprop --outline-alert--error-border: The border color for the error alert.\n * @todo: Make the alert styling more flexible.\n */\n@customElement('outline-alert')\nexport class OutlineAlert\n  extends OutlineElement\n  implements OutlineAlertInterface\n{\n  static styles: CSSResultGroup = [componentStyles];\n\n  @property({ type: String, attribute: 'status' })\n  status: AlertStatusType = 'info';\n\n  /**\n   * This is important context for screen readers.\n   */\n  @property({ type: Boolean, attribute: 'is-interactive' })\n  isInteractive = false;\n\n  @property({ type: Boolean, attribute: 'should-show-icon' })\n  shouldShowIcon = false;\n\n  @property({ type: String, attribute: 'size' })\n  size: AlertSize = 'large';\n\n  render(): TemplateResult {\n    // The `body` wrapper is used to avoid styles (like border) that are preventing us from styling `:host`.\n    return html`\n      <div\n        class=\"alert-body\"\n        role=\"${this.isInteractive ? 'alertdialog' : 'alert'}\"\n        aria-labelledby=${ifDefined(this.isInteractive ? 'message' : undefined)}\n      >\n        ${this.shouldShowIcon === true\n          ? html`\n              <div class=\"icon\">\n                <!--@todo include icon when we have that ready.-->\n              </div>\n            `\n          : null}\n        ${this.size === 'large'\n          ? html`\n              <div class=\"alert-header\">\n                <slot name=\"header\">${this.status}</slot>\n              </div>\n            `\n          : null}\n        <div class=\"message\" id=\"message\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'outline-alert': OutlineAlert;\n  }\n}\n"],"names":["componentStyles","css","alertSizes","alertStatusTypes","OutlineAlert","OutlineElement","html","ifDefined","__decorateClass","property","customElement"],"mappings":"6MAEA,MAAAA,EAAeC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,kMCIF,MAAAC,EAAa,CAAC,QAAS,OAAO,EAG9BC,EAAmB,CAC9B,OACA,UACA,QACA,SACF,EAiCa,IAAAC,EAAN,cACGC,CAEV,CAHO,aAAA,CAAA,MAAA,GAAA,SAAA,EAOqB,KAAA,OAAA,OAMV,KAAA,cAAA,GAGC,KAAA,eAAA,GAGC,KAAA,KAAA,OAAA,CAElB,QAAyB,CAEhB,OAAAC;AAAAA;AAAAA;AAAAA,gBAGK,KAAK,cAAgB,cAAgB,OAAO;AAAA,0BAClCC,EAAU,KAAK,cAAgB,UAAY,MAAS,CAAC;AAAA;AAAA,UAErE,KAAK,iBAAmB,GACtBD;AAAAA;AAAAA;AAAAA;AAAAA,cAKA,IAAI;AAAA,UACN,KAAK,OAAS,QACZA;AAAAA;AAAAA,sCAE0B,KAAK,MAAM;AAAA;AAAA,cAGrC,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,KAMd,CACF,EAjDaF,EAIJ,OAAyB,CAACJ,CAAe,EAGhDQ,EAAA,CADCC,EAAS,CAAE,KAAM,OAAQ,UAAW,SAAU,CAAA,EANpCL,EAOX,UAAA,SAAA,CAAA,EAMAI,EAAA,CADCC,EAAS,CAAE,KAAM,QAAS,UAAW,iBAAkB,CAAA,EAZ7CL,EAaX,UAAA,gBAAA,CAAA,EAGAI,EAAA,CADCC,EAAS,CAAE,KAAM,QAAS,UAAW,mBAAoB,CAAA,EAf/CL,EAgBX,UAAA,iBAAA,CAAA,EAGAI,EAAA,CADCC,EAAS,CAAE,KAAM,OAAQ,UAAW,OAAQ,CAAA,EAlBlCL,EAmBX,UAAA,OAAA,CAAA,EAnBWA,EAANI,EAAA,CADNE,EAAc,eAAe,CAAA,EACjBN,CAAA"}