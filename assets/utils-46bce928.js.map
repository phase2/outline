{"version":3,"file":"utils-46bce928.js","sources":["../../packages/outline-core/src/utils/utils.ts"],"sourcesContent":["import {\n  ALL_SIZES,\n  ALL_VERTICAL_ALIGNMENT,\n  ALL_HORIZONTAL_ALIGNMENT,\n  ALL_ORIENTATION,\n} from './types';\n\nexport function format(\n  first: string,\n  middle: string | undefined,\n  last: string | undefined\n): string {\n  return (\n    (first || '') +\n    (middle !== undefined ? ` ${middle}` : '') +\n    (last !== undefined ? ` ${last}` : '')\n  );\n}\n\n/**\n * Merge into argTypes in stories for a repeatable slot content type\n * This is for a control to dump in arbitrary strings which are NOT properties\n * of a component.\n */\nexport const argTypeSlotContent = {\n  defaultSlot: {\n    table: { category: 'Slots', defaultValue: { summary: 'NULL' } },\n    name: 'Default Slot',\n    description:\n      'Renders anything that is passed into the inner HTML of the given element.',\n  },\n};\n\nexport const argTypeOrientation = {\n  orientation: {\n    name: 'Orientation',\n    control: {\n      type: 'radio',\n      options: ALL_ORIENTATION,\n    },\n  },\n};\n\nexport const argTypeColSpan = {\n  name: 'Number of Columns to Span',\n  control: { type: 'range', min: 1, max: 12, step: 1 },\n};\n\nexport const argTypeRowSpan = {\n  name: 'Number of Rows to Span',\n  control: { type: 'range', min: 1, max: 6, step: 1 },\n};\n\nexport const argTypeGapSize = {\n  name: 'Gap Size',\n  control: {\n    type: 'select',\n    options: ['large', 'medium', 'small', 'none'],\n  },\n};\n\nexport const argTypeVerticalAlign = {\n  name: 'Vertical Alignment',\n  control: {\n    type: 'select',\n    options: ALL_VERTICAL_ALIGNMENT,\n  },\n};\n\nexport const argTypeHorizontalAlign = {\n  name: 'Horizontal Alignment',\n  control: {\n    type: 'select',\n    options: ALL_HORIZONTAL_ALIGNMENT,\n  },\n};\n\nexport const argTypeSize = {\n  name: 'Size',\n  control: {\n    type: 'select',\n    options: ALL_SIZES,\n  },\n};\n\nexport const argTypeImageUrl = {\n  name: 'Image URL',\n  description: 'The image URL to use for this demo.',\n  control: {\n    type: 'text',\n  },\n};\n\nexport const argTypeHidden = {\n  table: {\n    disable: true,\n  },\n};\n\nexport const argTypeMapMarkers = {\n  defaultSlot: {\n    table: { category: 'Slots', defaultValue: { summary: 'NULL' } },\n    name: 'Map Marker Slots',\n    description:\n      'Renders all Map Marker and User Marker custome elements passed into the inner Map html.',\n  },\n};\n\n/**\n * Turn a rem string like `4rem` into a px string like `64px`\n * @param {string} remVal\n */\nexport const extractPx = (remVal: string): string => {\n  const [num, unit] = remVal.split('rem');\n\n  return unit === 'px' || unit === undefined\n    ? remVal\n    : `${parseFloat(num) * 16}px`;\n};\n"],"names":["argTypeSlotContent","argTypeHidden"],"mappings":"AAwBO,MAAMA,EAAqB,CAChC,YAAa,CACX,MAAO,CAAE,SAAU,QAAS,aAAc,CAAE,QAAS,OAAS,EAC9D,KAAM,eACN,YACE,2EACJ,CACF,EA8DaC,EAAgB,CAC3B,MAAO,CACL,QAAS,EACX,CACF"}